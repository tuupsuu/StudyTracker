name: CI/CD Pipeline user service

on:
  push:
    branches:
      - dev
      - main
      - frontend
      - backend

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      modified_service: ${{ steps.detect_modified_service.outputs.modified_service }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: |
          cd UserService/
          npm ci
          cd ../ResultService/
          npm ci
          cd ../FrontEnd/my-app/
          npm ci

      - name: Build and test
        run: |
          cd UserService/
          screen -dmS node-server node .
          cd ../ResultService/
          screen -dmS node-server node .
          cd ../FrontEnd/my-app/
          screen -dmS node-server npm start
        
      - name: Debug Commit Hashes
        run: |
          echo "Before Commit: ${{ github.event.before }}"
          echo "Current Commit: ${{ github.sha }}"
          echo "Pull Request: ${{ github.event.pull_request.head.sha }}"
          echo "Base Branch: ${{ github.event.pull_request.base.sha }}"
        
      - name: Get Commit Range
        id: commit_range
        run: |
          source_branch=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" \
            | jq -r '.head.sha')
          target_branch=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" \
            | jq -r '.base.sha')
          echo "::set-output name=source_branch::$source_branch"
          echo "::set-output name=target_branch::$target_branch"
  
      - name: Detect modified service
        id: detect_modified_service
        run: |
          source_branch="${{ github.event.pull_request.head.sha }}"
          target_branch="${{ github.event.pull_request.base.sha }}"
          
          echo "source_branch=${source_branch}" >> $GITHUB_ENV
          echo "target_branch=${target_branch}" >> $GITHUB_ENV
          
          if git diff --name-only $source_branch^..$target_branch | grep -q '^UserService/'; then
            modified_service="userservice"
          elif git diff --name-only $source_branch^..$target_branch | grep -q '^ResultService/'; then
            modified_service="resultservice"
          elif git diff --name-only $source_branch^..$target_branch | grep -q '^FrontEnd/'; then
            modified_service="frontend"
          else
            modified_service="none"
          fi
          
          echo "modified_service=${modified_service}" >> $GITHUB_ENV

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Docker clean up
        run: docker system prune -af

      - name: Checkout code
        uses: actions/checkout@v2

      # Add conditional steps based on the modified service
      - name: Deploy User Service
        if: ${{ needs.build.outputs.modified_service == 'userservice' }}
        run: |
          cd UserService/
          docker build -t tuupsuu/userservicecontainer .
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push tuupsuu/userservicecontainer
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 'docker pull tuupsuu/userservicecontainer'
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 'docker stop userservicecontainer || true'
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 'docker rm userservicecontainer || true'
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 'docker run -d --name userservicecontainer -p 83:3002 tuupsuu/userservicecontainer'
          # Clean up unused Docker images
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 'docker image prune -f'

      - name: Deploy Result Service
        if: ${{ needs.build.outputs.modified_service == 'resultservice' }}
        run: |
          cd ResultService/
          docker build -t kivical/resultservicecontainer .
          echo "${{ secrets.DOCKER_PASSWORD_ELIAS }}" | docker login -u "${{ secrets.DOCKER_USERNAME_ELIAS }}" --password-stdin
          docker push kivical/resultservicecontainer
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 'docker pull kivical/resultservicecontainer'
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 'docker stop resultservicecontainer || true'
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 'docker rm resultservicecontainer || true'
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 'docker run -d --name resultservicecontainer -p 82:3002 kivical/resultservicecontainer'
          # Clean up unused Docker images
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 'docker image prune -f'

     
      - name: Deploy Frontend
        if: ${{ needs.build.outputs.modified_service == 'frontend' }}
        run: |
          cd FrontEnd/my-app/
          docker build -t eepehukk/frontendcontainer .
          echo "${{ secrets.DOCKER_PASSWORD_EEMIL }}" | docker login -u "${{ secrets.DOCKER_USERNAME_EEMIL }}" --password-stdin
          docker push eepehukk/frontendcontainer
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 'docker pull eepehukk/frontendcontainer'
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 'docker stop frontendcontainer || true'
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 'docker rm frontendcontainer || true'
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 'docker run -d --name frontendcontainer -p 81:80 eepehukk/frontendcontainer'
          # Clean up unused Docker images
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 'docker image prune -f'