name: CI/CD Pipeline user service

on:
  push:
    branches:
      - dev
      - main
      - frontend
      - backend
    paths:
      - 'UserService/**'
      - 'ResultService/**'
      - 'FrontEnd/my-app/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14

    - name: Install dependencies and build
      run: |
        for service in UserService ResultService FrontEnd/my-app; do
          if git diff --name-only HEAD~1 | grep -q "^$service"; then
            cd $service
            npm ci
            screen -dmS node-server node .
            cd -
          fi
        done

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Docker clean up
      run: docker system prune -af

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build, tag, and push Docker images
      run: |
        for service in UserService ResultService FrontEnd/my-app; do
          if git diff --name-only HEAD~1 | grep -q "^$service"; then
            cd $service
            # Set up Docker metadata
            uses: docker/metadata-action@v3
            with:
              images: "${service}container"

            # Build Docker image
            docker build -t ${DOCKER_USERNAME}/${service}container .

            # Push Docker image
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            docker push ${DOCKER_USERNAME}/${service}container
            cd -
          fi
        done

    - name: Add SSH known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -t rsa 172.104.236.131 >> ~/.ssh/known_hosts

    - name: Deploy to Docker server
      run: |
        for service in UserService ResultService FrontEnd/my-app; do
          if git diff --name-only HEAD~1 | grep -q "^$service"; then
            cd $service
            # Pull and redeploy Docker container
            sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 "docker pull ${DOCKER_USERNAME}/${service}container"
            sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 "docker stop ${service}container || true"
            sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 "docker rm ${service}container || true"
            sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 "docker run -d --name ${service}container -p $PORT:$INTERNAL_PORT ${DOCKER_USERNAME}/${service}container"
            
            # Clean up unused Docker images
            sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh root@172.104.236.131 'docker image prune -f'
            cd -
          fi
        done
